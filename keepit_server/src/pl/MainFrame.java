/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import services.FileServices;

/**
 *
 * @author Hp
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    Socket skt = null;

    public MainFrame() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(199, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(146, 146, 146))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(jButton1)
                .addContainerGap(183, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new TurnOn().start();
        // String un = ConnectToClient.readData(12349);
        //String pwd = ConnectToClient.readData(12349);
        //LoginServices.authenticateUser(un, pwd);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    class TurnOn extends Thread {

        public void run() {

            ServerSocket sskt = null;
            DataOutputStream dos = null;
            DataInputStream dis = null;
            try {
                sskt = new ServerSocket(12345);
                do {
                    System.out.println("waiting for client request");
                    skt = sskt.accept();
                    System.out.println("Connected to client");
                    new ReceiveData().start();
                } while (true);

            } catch (Exception e) {
                System.out.println(e);

            }

        }
    }

    public class ReceiveData extends Thread {

        public void run() {
            try {
                DataOutputStream dos = new DataOutputStream(skt.getOutputStream());
                DataInputStream dis = new DataInputStream(skt.getInputStream());

                String choice = dis.readUTF();
                System.out.println(choice);
                String folderpath = "C:\\Users\\Hp\\Documents\\NetBeansProjects\\keepit_server\\ftpserver\\";
                switch (choice) {
                    case "1": {//upload 

                        dos.writeBoolean(true);

                        String foldername = dis.readUTF();
                        System.out.println(foldername);
                        String dirpath = folderpath + foldername;
                        File dir = new File(dirpath);
                        if (dir.exists()) {

                            boolean access = dis.readBoolean();
                            String name = dis.readUTF();
                            System.out.println(name);

                            String filepath;
                            System.out.println(access);
                            if (access == true) {
                                filepath = dirpath + "\\public\\" + name;
                            } else {
                                filepath = dirpath + "\\private\\" + name;
                            }
                            FileOutputStream fo = new FileOutputStream(new File(filepath));
                            int c;
                            byte b[] = new byte[1024];
                            while ((c = dis.read(b)) != -1) // returntpe of read is int .. returns index of byte array			{
                            {
                                fo.write(b, 0, c);
                            }
                        } else {
                            dir.mkdir();
                            String filepath = dirpath + "\\public";
                            File file = new File(filepath);
                            file.mkdir();
                            String filepath2 = dirpath + "\\private";
                            File file2 = new File(filepath2);
                            file2.mkdir();

                            boolean access = dis.readBoolean();
                            String filename = dis.readUTF();
                            //String filepath;
                            System.out.println(access);
                            if (access == true) {
                                filepath = dirpath + "\\public\\" + filename;
                            } else {
                                filepath = dirpath + "\\private\\" + filename;
                            }
                            FileOutputStream fo = new FileOutputStream(new File(filepath));
                            int c;
                            byte b[] = new byte[1024];
                            while ((c = dis.read(b)) != -1) // returntpe of read is int .. returns index of byte array			{
                            {
                                fo.write(b, 0, c);
                            }
                        }

                        break;
                    }

                    case "2": {//download
                        dos.writeBoolean(true);
                        String foldername = dis.readUTF();
                        String filename = dis.readUTF();
                        String access = dis.readUTF();
                        FileInputStream fis = new FileInputStream(folderpath + "\\" + foldername + "\\" + access + "\\" + filename);
                        File f = new File(folderpath + "\\" + foldername + "\\" + access + "\\" + filename);
                        if (f.exists()) {
                            int c;
                            int size = 0;
                            byte b[] = new byte[1024];
                            while ((c = fis.read(b)) != -1) {
                                dos.writeBoolean(true);
                                dos.write(b, 0, c);
                                size++;

                            }dos.writeBoolean(false);
                        }
                        System.out.println("File Sent successfully ");
                        break;
                    }
                    case "3": {
                    System.out.println("khhu");
                    String access=dis.readUTF();
                    int id=dis.readInt();
                    String filename=dis.readUTF();
                    String a[]=filename.split("\\.");
                    String extension=a[a.length-1];
                    String name=a[0];
                    String newname=dis.readUTF();
                    String username=dis.readUTF();  
                    String namewithextension=newname+"."+extension;
                    FileServices.updateFile(id,filename,namewithextension);
                    File path1=new File(folderpath+username+"\\"+access+"\\"+filename);
                    System.out.println(folderpath+username+"\\"+access+"\\"+filename);
                    File path2=new File(folderpath+username+"\\"+access+"\\"+newname+"."+extension);
                    System.out.println(folderpath+username+"\\"+access+"\\"+newname+"."+extension);
                    Boolean b=path1.renameTo(path2);
                    System.out.println(b);
                    System.out.println("rename");
                    dos.writeBoolean(true);
                    break;
                        
                    }
                    case "4":
                {
                    String access=dis.readUTF();
                    System.out.println(access);
                    int id=dis.readInt();
                    System.out.println(id);
                    String filename=dis.readUTF();
                    System.out.println(filename);
                    String username=dis.readUTF();
                    System.out.println(username);
                    File path1=new File(folderpath+username+"\\"+access+"\\"+filename);
                    System.out.println(folderpath+username+"\\"+access+"\\"+filename);
                    boolean b=path1.delete();
                    System.out.println(b);
                    FileServices.deleteFile(id, filename);
                    dos.writeBoolean(b);
                    break;
                }
                    case"5":
                    {
                       
                    System.out.println("aman");
                    String srcusername=dis.readUTF();
                    System.out.println("name 1"+srcusername);
                    String username=dis.readUTF();
                    System.out.println("name2 "+username);
                    String access=dis.readUTF();
                    System.out.println(access);
                    String filename=dis.readUTF();
                    System.out.println("filename");
                    String srcpath=folderpath+srcusername+"\\private\\"+filename;
                    System.out.println(srcpath);
                    String dstpath=folderpath+username+"\\"+access+"\\"+filename;
                    System.out.println(dstpath);
                    if(FileServices.copyFile(srcpath, dstpath))
                    {
                        System.out.println("File Copied");
                    }
                    
                    break;
                    }
                }
            } catch (Exception e) {

            }
            
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
